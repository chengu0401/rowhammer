ANALYIS OF rowhammer-test.cc

The function that lays out the overall design of the test is "main_prog" on line 102. 
This function gets called in the actual main, where the author takes care to run the 
test in a forked child of the program, as there may be 
a chance of a kernel panic happening if PID 1 crashes.

The first step is mapping and setting a large portion of memory from which to pick addresses from. 
This is done with a call to mmap and then a call to memset. 

g_mem = (char *) mmap(NULL, mem_size, PROT_READ | PROT_WRITE,
	MAP_ANON | MAP PRIVATE, -1, 0);

where mem_size is decalred and set earlier as:
	const size_t mem_size = 1 << 30; \\ this is 2^30 (about a GB)

and g_mem is declared as a char *

This call to mmap will make g_mem point to the beginning of about 1GB of(virtual) memory addresses.

Next is the memset call:
	memset(g_mem, 0xff, mem_size); 

This line will set each byte the mapped pages to 0xff, which is 0b11111111, so in effect, this 
will turn these pages into all 1's.

Next we enter into the main loop of the program. The test makes use of a Timer class here and in
multiple situations and parts of the code, which has one funtion get_diff(). It returns the 
difference in time between when the instance of Timer was declared, and when the function call was 
made. 

While main_prog is lays out the design of the test, most of the actual work (ie. the hammering) is
done in a function toggle(int iterations, int addr_count), which is called in each iteration of the
main loop. The values passed to this call of toggle in the main loop are 10 and 8 for iterations and
addr_count respectively. "iterations" determines how many time the main loop of toggle is run, which
pretty much surrounds the entire body of toggle. For example, aside from the timer, there would not be
a difference between:

static void toggle(int iterations, int addr_count) {...}
toggle(10,8);

and

static void toggle(int addr_count) {...}
for (int i = 0; i < 10, i++) 
	toggle(8);

addr_count refers to the number of addresses that will attempt to be hammered in a call to toggle.
addresses are stored in an array uint32_t *addrs[addr_count] and are chosen by a function defined 
earlier in the test, pick_addr():

char *pick_addr() {
	size_t offset = (rand() << 12) % mem_size;
	return g_mem + offset; 
}

An offset is generated within the limits of the declared mem_size (set to 2^30, or 1 GB in the test).
This offset is added to the g_mem pointer, which points to the start of the 1GB of memory mapped for
the test. This allows for randomly choosing an address within the mmap's and memset'd memory.

After the set of addresses is randomly chosen in toggle, the reads to the addresses that are the
actual "hammering" happen in this block of code at line 70:

uint32_t sum = 0;
for (int i = 0; i < toggles; i++) {
	for (int a = 0; a < addr_count; a++)
        sum += *addrs[a] + 1;
    for (int a = 0; a < addr_count; a++)
        asm volatile("clflush (%0)" : : "r" (addrs[a]) : "memory");
}

The toggles value translates to how many times each line of DRAM (each address) will be activated 
in total, and is set as 540000 earlier in the code. The code causes the DRAM lines to be repeatedly
opened and read by looping over the set of addresses, using the arbitrary values that are there in a 
simple addition. The + 1 is likely there to prevent some sort of optimizations that would prevent
the value from needing to be read, which would prevent that line of DRAM from being opened. After
each address has been read once the clflush instruction is used to flush the addresses of out cache.
Then the whole process is done again. This results in a memory access pattern like this:

loop:
open line addr[0], read, close line
open line addr[1], read, close line
...
open line addr[7], read, close line

which is the "hammering" that we desire.

After the hammering is done, the code provides somes statistics about time taken per set of addresses,
time taken in total, the total number of memory accesses, time taken per memory access, and the number
of memory accesses per refresh period (which is assumed to be 64 ms in this test). The most important
statistic here is memory accesses per refresh period (per address) which lets us know how many times
a line of DRAM was "hammered" in between refresh attempts. 

The providing of statistics marks the end of the call to toggle. The checking for errors is done
back in main_prog, where the entire 2^30 bytes pointed to by g_mem are checked to make sure they are
all still 0xff:

uint64_t *end = (uint64_t *) (g_mem + mem_size);
uint64_t *ptr;
int errors = 0;
for (ptr = (uint64_t *) g_mem; ptr < end; ptr++) {
    uint64_t got = *ptr;
    if (got != ~(uint64_t) 0) {
		printf("error at %p: got 0x%" PRIx64 "\n", ptr, got);
		errors++;
    }
}
 
CONCLUSION

In summary, these are the high level stages of the rowhammer test that will need to be migrated to
a GPU programming context in order to recreate the approach:

1. Map a large section of memory for the process
2. Write a data pattern to that memory
3. Pick a set of 2+ addresses in the mapped and written memory 
4. Generate alternating reads to the addresses (so the memory controller is forced to opena and close
	each time) for some amount of time longer than the refresh rate of the DRAM
5. Repeat steps 3-4 a number of times depending the number of banks of DRAM (you want to effectively
	guarantee that at some point you choose addresses maped to the same bank of DRAM)
6. Loop through the mapped memory, checking to see if the written data pattern remains. If it has 
	changed somewhere, then congrats - you've flipped a bit!


